"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9135],{1344:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>l,data:()=>t});var n=a(641);const e={},l=(0,a(6262).A)(e,[["render",function(s,i){const a=(0,n.g2)("Badge");return(0,n.uX)(),(0,n.CE)("div",null,[i[0]||(i[0]=(0,n.Fv)('<p>Git 提交规范对于团队协作和项目管理至关重要。良好的提交规范有助于团队成员更好地理解和追踪项目的变更历史。以下是常见的 Git 提交规范。</p><h2 id="提交信息格式" tabindex="-1"><a class="header-anchor" href="#提交信息格式"><span>提交信息格式</span></a></h2><p>Git 提交信息通常包括以下三部分：</p><ul><li><strong>标题（Header）</strong>：简洁地描述本次提交的目的或改动。通常限制在 50 字符以内，并且使用祈使句。</li><li><strong>正文（Body）</strong>：详细描述本次提交的内容，包括为什么做这个改动、解决了什么问题、如何解决的等。正文应该尽量详细清晰，每行不超过 72 个字符。</li><li><strong>尾部（Footer）</strong>：如果有相关的 <code>issue</code> 或 <code>bug</code>，可以在这里引用。常用于关联任务、问题跟踪等。</li></ul><p><strong>示例格式</strong>:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;类型&gt;( &lt;模块&gt;):&lt;简短描述&gt;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>&lt;详细描述&gt;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>&lt;Footer&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见的提交类型" tabindex="-1"><a class="header-anchor" href="#常见的提交类型"><span>常见的提交类型</span></a></h2><p>常见的提交类型包括：</p><ul><li><code>feat</code>：新增功能</li><li><code>fix</code>：修复 bug</li><li><code>docs</code>：文档修改</li><li><code>style</code>：代码格式调整（空格、缩进、逗号等，不影响功能的更改）</li><li><code>refactor</code>：重构代码（不改变功能的修改）</li><li><code>perf</code>：性能优化</li><li><code>test</code>：增加测试</li><li><code>chore</code>：其他杂项任务（如构建、依赖项更新等）</li><li><code>build</code>：构建相关的改动（如 CI 配置、编译工具等）</li><li><code>ci</code>：持续集成相关的更改</li><li><code>revert</code>：回滚某次提交</li></ul><h2 id="提交信息写作规范" tabindex="-1"><a class="header-anchor" href="#提交信息写作规范"><span>提交信息写作规范</span></a></h2><h3 id="标题" tabindex="-1"><a class="header-anchor" href="#标题"><span>标题</span></a></h3><ul><li>使用动词的原形（如：Add、Fix、Update），避免使用已完成时态（如：Added、Fixed）。</li><li>使用简洁明了的语言，通常限制在 50 字符以内，便于快速浏览。</li><li>以大写字母开头，避免句号结尾。</li></ul><h3 id="正文" tabindex="-1"><a class="header-anchor" href="#正文"><span>正文</span></a></h3><ul><li>如果有必要，提供更多的上下文，特别是对为什么做此更改的解释。</li><li>每行长度应尽量控制在 72 字符以内，确保在 Git 的日志中可以易于阅读。</li><li>描述清楚“做了什么”和“为什么做”，避免过于笼统的描述。</li></ul><h3 id="尾部" tabindex="-1"><a class="header-anchor" href="#尾部"><span>尾部</span></a></h3><ul><li>如果相关，可以添加任务跟踪系统的 ID，如 GitHub、JIRA 等（例如：<code>Closes #123</code>、<code>Fixes JIRA-456</code>）。</li></ul><p><strong>示例提交信息</strong>:</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">feat(auth</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">): add login API</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Implemented</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> login</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> endpoint</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> with</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> JWT</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> authentication</span></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Added</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> validation</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> for</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> user</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> credentials</span></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">-</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Enhanced</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> error</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> handling</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Closes</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> #42</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="提交规范的其他规则" tabindex="-1"><a class="header-anchor" href="#提交规范的其他规则"><span>提交规范的其他规则</span></a></h2><ul><li><strong>避免提交不必要的文件</strong>：不要将编译结果、临时文件、IDE 配置文件等提交到版本控制中。可以通过 <code>.gitignore</code> 文件来忽略这些文件。</li><li><strong>逻辑清晰的单一提交</strong>：每次提交应针对一个问题或功能进行修改，避免提交过多不同类型的改动（例如：修复 Bug 和添加新功能应分开提交）。</li><li><strong>Rebase vs Merge</strong>：在协作时，尽量使用 <code>git rebase</code> 来保持提交历史的清晰和线性。合并提交（merge）应仅在必要时使用（如合并 feature 分支到主分支时）。</li></ul><h2 id="提交历史的管理" tabindex="-1"><a class="header-anchor" href="#提交历史的管理"><span>提交历史的管理</span></a></h2><ul><li><strong>Squash 提交</strong>：在完成一个功能开发后，可以将多个提交压缩为一个，以减少历史提交的冗余，保持 Git 历史的简洁。</li><li><strong>修改历史</strong>：通过修改最近一次提交或使用交互式 rebase 修改多个提交。</li></ul><h2 id="规范工具" tabindex="-1"><a class="header-anchor" href="#规范工具"><span>规范工具</span></a></h2><ul><li><strong>Commitlint</strong>：用于检查提交信息是否符合规范，可以配置 <code>commitlint</code> 来验证提交信息格式。</li><li><strong>Husky</strong>：用于在 Git 钩子（hooks）中运行 Git 命令或脚本（如：<code>pre-commit</code>、<code>commit-msg</code> 钩子），确保提交信息格式符合要求。</li></ul><p>配置这些工具能够帮助确保团队的一致性，并在提交时自动进行检查。</p>',25)),(0,n.Lk)("ul",null,[(0,n.Lk)("li",null,[(0,n.bF)(a,{type:"danger",text:" TODO 以后添加 `Husky` 和 `lint-staged` "})])]),i[1]||(i[1]=(0,n.Fv)('<p><strong>Example of Husky + Commitlint Setup</strong>:</p><ol><li>安装 <code>husky</code> 和 <code>commitlint</code>：</li></ol><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --save-dev</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> husky</span></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> i</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> @commitlint/config-conventional</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> @commitlint/cli</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -D</span></span>\n<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">npm</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> lint-staged</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -D</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>配置 <code>commitlint</code>： 在项目根目录下创建 <code>.commitlintrc.json</code> 文件，内容如下：</li></ol><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>\n<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">extends</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">@commitlint/config-conventional</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>配置 <code>husky</code>： 在 <code>package.json</code> 中添加 <code>husky</code> 钩子配置：</li></ol><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>\n<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">husky</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>\n<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">    &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">hooks</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>\n<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">      &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">commit-msg</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">commitlint -E HUSKY_GIT_PARAMS</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>\n<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>遵循一致的 Git 提交规范能够帮助团队在协作中更清晰地理解代码变动，减少冲突并提高代码质量。良好的提交历史不仅有助于代码审查和回滚，也能帮助项目维护者在未来回顾历史时，清晰地理解每次更改的目的和影响。</p>',9))])}]]),t=JSON.parse('{"path":"/git/ur6qna7c/","title":"规范","lang":"zh-CN","frontmatter":{"title":"规范","createTime":"2024/12/24 09:15:24","permalink":"/git/ur6qna7c/"},"headers":[],"readingTime":{"minutes":3.63,"words":1089},"git":{"updatedTime":1735027935000,"contributors":[{"name":"gaobo","username":"gaobo","email":"ql25520@163.com","commits":3,"avatar":"https://avatars.githubusercontent.com/gaobo?v=4","url":"https://github.com/gaobo"}]},"filePathRelative":"notes/Git/Git提交规范.md","bulletin":false}')}}]);